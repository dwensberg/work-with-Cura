#Communicartes with Cura and sends an STL file to it. Spits out a gcode that is analyzed for feature recognition.
##trys to do it all in one loop insread of reloading and such

#ADD IN MACHINE PARAMETER PIECES

#import necessary toolboxes
import os
import math
import timeit
import time

START=time.time()

#FUNCTION DEFINTIONS
def runCura(filename,gcode_folder):
    names=os.listdir(gcode_folder)
    val=0
    for name in names:
        if filename.find(name)>-1:
            val=1
            break
##        else:
##            val=0
    return val

def distance(p1,p2):
    return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)

def lineLook(line):
    #output is going to be a list with first entry as description
    out=[];
    if (line.find("M")>-1):
        out.append("M")
    elif (line.find(";TYPE:")>-1):
        out.append("TYPE")
        temp=line.split(':',1)
        st=temp[1].find("\n")
        str1=""
        i=0
        for i,char in enumerate(temp[1]):
            if i<st:
                str1=str1+char
            i=i+1
        out.append(str1)
    elif (line.find("G")>-1):
        if line.find("G1")>-1:
            out.append("G1")
        else:
            out.append("G0")
        temp=line.split()
        ln=len(temp)
        for piece in temp:
            if piece.find("F")>-1:
                out.append("F")
                out.append(float(piece[1:len(piece)]))
            elif piece.find('X')>-1:
                out.append("X")
                out.append(float(piece[1:len(piece)]))
            elif piece.find("Y")>-1:
                out.append("Y")
                out.append(float(piece[1:len(piece)]))
            elif piece.find("E")>-1:
                out.append("E")
                out.append(float(piece[1:len(piece)]))
            elif piece.find("Z")>-1:
                out.append("Z")
                out.append(float(piece[1:len(piece)]))
    else:
        out.append("&&")
    return out

def fnum(num):
    return "{0:.3f}".format(num)

def makeReport(info,zinit,time,filename):
    ln=len(time)
    fn=open(filename,"w")
    fn.write("Build Report Generated by CuraAnalysisV2 \n")
    fn.write("Report on filename: "+filename+"\n")
    fn.write(" \n")
    fn.write("Total Metrics: \n")
    fn.write("Total time (hr): "+fnum(time[ln-1]/3600)+"\n")
    fn.write("Build Height (mm): "+fnum(info[0]-zinit)+"\n")
    fn.write("Number of layers: "+fnum(ln)+"\n")
    fn.write("Slice thickness (mm): "+fnum((info[0]-zinit)/(ln-1))+"\n")
    fn.write("Total Time spent traveling (hr): "+fnum(info[1]/3600)+"\n")
    fn.write("Total head distance travelled (mm): "+fnum(info[2])+"\n")
    fn.write("Total time spent in rapid motion G0 (hr): "+fnum(info[3]/3600)+"\n")
    fn.write("Total distance in rapid motion G0 (mm): "+fnum(info[4])+"\n")
    fn.write("Average fast head speed G0 (mm/min): "+fnum(info[5])+"\n")
    fn.write("Total time spent extruding G1 (hr): "+fnum(info[6]/3600)+"\n")
    fn.write("Total distance G1 (mm): "+fnum(info[7])+"\n")
    fn.write("Average extrusion speed G1 (mm/min): "+fnum(info[8])+"\n")
    fn.write("Total extruded length (mm): "+fnum(info[9])+"\n")
    fn.write("\n")
    fn.write("FEATURE STATISTICS: \n")
    fn.write("Total outer wall count: "+fnum(info[10])+"\n")
    fn.write("Total outer wall time (hr): "+fnum(info[11]/3600)+"\n")
    fn.write("Total filament used on outer walls (mm): "+fnum(info[12])+"\n")
    fn.write("Total inner wall count: "+fnum(info[13])+"\n")
    fn.write("Total inner wall time (hr): "+fnum(info[14]/3600)+"\n")
    fn.write("Total filament used on inner walls (mm): "+fnum(info[15])+"\n")
    fn.write("Total fill count: "+fnum(info[16])+"\n")
    fn.write("Total fill time (hr): "+fnum(info[17]/3600)+"\n")
    fn.write("Total filament used on fills (mm): "+fnum(info[18])+"\n")
    fn.write("Total skirt count: "+fnum(info[19])+"\n")
    fn.write("Total skirt time (hr): "+fnum(info[20]/3600)+"\n")
    fn.write("Total filament used on skirts (mm): "+fnum(info[21])+"\n")
    fn.close()
    return

def analyze(name,machine,extruder):
    #inputs are basic name before file types, the machine definiton json, and the extruder definition json
    #establish folder pathways
    path_to_CuraEngine="/Applications/Cura.app/Contents/MacOS/CuraEngine"
    stl_folder="/users/dwensberg/Documents/PaperLessPartsTest/stlFiles/"
    gcode_folder="/users/dwensberg/Documents/PaperLessPartsTest/GcodeFiles/"
    output_folder="/users/dwensberg/Documents/PaperLessPartsTest/AnalysisFiles/"
    
    stl=stl_folder+name+".stl"
    gcode=gcode_folder+name+".txt"
    analysis=output_folder+name+"_ANALYSIS.txt"

    #See if cura has already run on this file, if not, analyze it
    if runCura(gcode,gcode_folder)==0:
        print("Cura run on "+name+" not found, running through cura")
        #splice together os command and execute
        cmd=path_to_CuraEngine+" slice -j "+machine+" -j "+extruder+" -l "+stl+" -o "+gcode
        #print(cmd)
        os.system(cmd)
    else:
        print("Cura run found on "+name+", skipping cura run")

    gcodeFile=open(gcode,"r")
    lnct=0;
    ct=0;
    layerct=0;
    layerStart=[]
    layerEnd=[]
    layerTimeElapsed=[];

    #OVERALL SCAN
    for line in gcodeFile:
        lnct=lnct+1;
        #get layer count
        if (line.find("LAYER_COUNT:")>-1):
            #print("Found Layer Count:")
            temp=line.split(':',1)
            layer_count=int(temp[1])
            #print(layer_count)
            #print("On Line:")
            #print(lnct)

        #track start and stop locations of each layer
        if (line.find(";LAYER:")>-1):
            #signifies beggining of layer
            temp=line.split(':',1)
            layerct=int(temp[1])
            #print(layerct)
            layerStart.append(lnct)

        #track layer times
        if (line.find(";TIME_ELAPSED:")>-1):
            #signifies end of layer
            temp=line.split(':',1)
            layerEnd.append(lnct)
            layerTimeElapsed.append(float(temp[1]))

    gcodeFile.close()

    #if cura cannot generate gcode for a certain stl
    if layer_count==0:
        fn=open(analysis,"w")
        fn.write("Build Report Generated by CuraAnalysisV2 \n")
        fn.write("Report on filename: "+name+".stl \n")
        fn.write(" \n")
        print("CURA COULD NOT GENERATE MEANINGFUL GCODE WITH CURRENT SETTINGS")
        fn.write("CURA COULD NOT GENERATE MEANINGFUL GCODE WITH CURRENT SETTINGS \n")
        fn.write("DOUBLE CHECK FOR MEANIFUL STL AND/OR ADJUST MACHINE SETTINGS \n")
        fn.close()
        return
    
    gcodeFile=open(gcode,"r")
    #initialize all layer tracking variables
    time_total=0
    distance_total=0
    time_g0=0
    distance_g0=0
    time_g1=0
    distance_g1=0
    extrusion_total=0
    count_wall_outer=0
    time_wall_outer=0
    ext_wall_outer=0
    count_wall_inner=0
    time_wall_inner=0
    ext_wall_inner=0
    count_fill=0
    time_fill=0
    ext_fill=0
    count_skirt=0
    time_skirt=0
    ext_skirt=0

    xo=0
    yo=0
    eo=0
    xn=0
    yn=0
    en=0
    atype="none"
    aspeed="none"
    current_speed=0
    i=0
    zinit=100000;
    for i,line in enumerate(gcodeFile):
        #parse file from one start point to the next
        if i>=layerStart[0] and i<=layerEnd[len(layerEnd)-1]:
            lineInfo=lineLook(line)
            if lineInfo[0].find("TYPE")>-1:
                atype=lineInfo[1]
            elif lineInfo[0].find("G")>-1:
                if "G1" in lineInfo:
                    aspeed="G1"
                elif "G0" in lineInfo:
                   aspeed="G0"
                if "X" in lineInfo:
                    ind=lineInfo.index("X")+1
                    xn=lineInfo[ind]
                if "Y" in lineInfo:
                    ind=lineInfo.index("Y")+1
                    yn=lineInfo[ind]
                if "Z" in lineInfo:
                    ind=lineInfo.index("Z")+1
                    z=lineInfo[ind]
                    if z<zinit:
                        zinit=z
                if "F" in lineInfo:
                    ind=lineInfo.index("F")+1
                    current_speed=lineInfo[ind]
                if "E" in lineInfo:
                    ind=lineInfo.index("E")+1
                    en=lineInfo[ind]
                    
                #make calculations
                dis=distance([xn,yn],[xo,yo])
                ext=en-eo
    ##            if ext<0:
    ##                print(en)
    ##                print(eo)
    ##                To reverse the extruder by a given amount (for example to reduce its internal
    ##                pressure while it does an in-air movement so that it doesn't dribble) simply
    ##                use G0 or G1 to send an E value that is less than the currently extruded length.
                if current_speed==0:
                    time=0
                else:
                    #need to multiply by 60 because its mm/min
                    time=dis/current_speed*60
                
                #add to active totals
                #geometry type
                if atype=="SKIRT":
                    count_skirt=count_skirt+1
                    time_skirt=time_skirt+time
                    ext_skirt=ext_skirt+ext
                elif atype=="WALL-OUTER":
                    count_wall_outer=count_wall_outer+1
                    time_wall_outer=time_wall_outer+time
                    ext_wall_outer=ext_wall_outer+ext
                elif atype=="WALL-INNER":
                    count_wall_inner=count_wall_inner+1
                    time_wall_inner=time_wall_inner+time
                    ext_wall_inner=ext_wall_inner+ext
                elif atype=="FILL":
                    count_fill=count_fill+1
                    time_fill=time_fill+time
                    ext_fill=ext_fill+ext
                    
                #speed type
                if aspeed=="G0":
                    distance_g0=distance_g0+dis
                    time_g0=time_g0+time
                elif aspeed=="G1":
                    distance_g1=distance_g1+dis
                    time_g1=time_g1+time
                    
                #add to overall totals
                distance_total=distance_total+dis
                time_total=time_total+time
                extrusion_total=extrusion_total+ext

            #end of calculations for this loop, redefine old to new
            xo=xn
            yo=yn
            eo=en
            i=i+1

    #define layer list info before breaking
    layer_info=[]
    layer_info.append(z)
    layer_info.append(time_total)
    layer_info.append(distance_total)
    layer_info.append(time_g0)
    layer_info.append(distance_g0)
    layer_info.append(distance_g0/time_g0*60)
    layer_info.append(time_g1)
    layer_info.append(distance_g1)
    layer_info.append(distance_g1/time_g1*60)
    layer_info.append(extrusion_total)
    layer_info.append(count_wall_outer)
    layer_info.append(time_wall_outer)
    layer_info.append(ext_wall_outer)
    layer_info.append(count_wall_inner)
    layer_info.append(time_wall_inner)
    layer_info.append(ext_wall_inner)
    layer_info.append(count_fill)
    layer_info.append(time_fill)
    layer_info.append(ext_fill)
    layer_info.append(count_skirt)
    layer_info.append(time_skirt)
    layer_info.append(ext_skirt)

    gcodeFile.close()

    makeReport(layer_info,zinit,layerTimeElapsed,analysis)

#MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN
path_to_CuraEngine="/Applications/Cura.app/Contents/MacOS/CuraEngine"
stl_folder="/users/dwensberg/Documents/PaperLessPartsTest/stlFiles/"
gcode_folder="/users/dwensberg/Documents/PaperLessPartsTest/GcodeFiles/"
output_folder="/users/dwensberg/Documents/PaperLessPartsTest/AnalysisFiles/"

#get machine parameters
#TURN INTO A UI FUNCTION
json_machine_path="/Applications/Cura.app/Contents/Resources/resources/definitions/"
json_extruder_path="/Applications/Cura.app/Contents/Resources/resources/extruders/"
machine=json_machine_path+"ultimaker3.def.json";
extruder=json_extruder_path+"ultimaker3_extruder_left.def.json";
#install for different slicing mechanisms and such

#get stl name and set output names (file select)
names=os.listdir(stl_folder)
namesA=os.listdir(output_folder)
for name in names:
    if name.find(".stl")>-1 or name.find("STL")>-1:
        temp=name.split('.',1)
        fname=temp[0]
        if fname+"_ANALYSIS.txt" in namesA:
            print("Analysis on "+fname+" found, skipping analysis")
        else:
            print("Analysis on "+fname+" not found, running analysis")
            analyze(fname,machine,extruder)
            
END=time.time()
print("Total Time: "+fnum(END-START)+" seconds")
